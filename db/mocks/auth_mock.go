// Code generated by MockGen. DO NOT EDIT.
// Source: services/auth.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	dto "github.com/decagonhq/meddle-api/dto"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// SignupUser mocks base method.
func (m *MockAuthService) SignupUser(request *dto.SignupRequest) (*dto.SignupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignupUser", request)
	ret0, _ := ret[0].(*dto.SignupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignupUser indicates an expected call of SignupUser.
func (mr *MockAuthServiceMockRecorder) SignupUser(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignupUser", reflect.TypeOf((*MockAuthService)(nil).SignupUser), request)
}
